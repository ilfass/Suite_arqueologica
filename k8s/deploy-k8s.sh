#!/bin/bash

# ============================================================================
# SCRIPT DE DEPLOY KUBERNETES - SUITE ARQUEOL√ìGICA
# ============================================================================

set -e

echo "üöÄ Iniciando deploy de Suite Arqueol√≥gica en Kubernetes..."

# Variables de configuraci√≥n
NAMESPACE="suite-arqueologica"
REGISTRY="tu-registry.com"
IMAGE_TAG="latest"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funci√≥n para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# Verificar que kubectl est√© instalado
if ! command -v kubectl &> /dev/null; then
    error "kubectl no est√° instalado. Por favor inst√°lalo primero."
fi

# Verificar conexi√≥n al cluster
if ! kubectl cluster-info &> /dev/null; then
    error "No se puede conectar al cluster de Kubernetes."
fi

log "‚úÖ Conexi√≥n al cluster verificada"

# Construir imagen Docker
log "üî® Construyendo imagen Docker..."
docker build -t $REGISTRY/suite-arqueologica:$IMAGE_TAG .

# Subir imagen al registry
log "üì§ Subiendo imagen al registry..."
docker push $REGISTRY/suite-arqueologica:$IMAGE_TAG

# Crear namespace si no existe
log "üìÅ Creando namespace..."
kubectl apply -f k8s/namespace.yaml

# Aplicar ConfigMap y Secrets
log "üîê Aplicando ConfigMap y Secrets..."
kubectl apply -f k8s/configmap.yaml
kubectl apply -f k8s/secret.yaml

# Aplicar Deployment
log "üöÄ Aplicando Deployment..."
kubectl apply -f k8s/deployment.yaml

# Aplicar Services
log "üîå Aplicando Services..."
kubectl apply -f k8s/service.yaml

# Aplicar Ingress
log "üåê Aplicando Ingress..."
kubectl apply -f k8s/ingress.yaml

# Aplicar HPA
log "üìà Aplicando Horizontal Pod Autoscaler..."
kubectl apply -f k8s/hpa.yaml

# Aplicar monitoreo (si Prometheus est√° instalado)
if kubectl get namespace monitoring &> /dev/null; then
    log "üìä Aplicando configuraci√≥n de monitoreo..."
    kubectl apply -f k8s/monitoring.yaml
else
    warn "Namespace 'monitoring' no encontrado. Saltando configuraci√≥n de monitoreo."
fi

# Esperar a que los pods est√©n listos
log "‚è≥ Esperando a que los pods est√©n listos..."
kubectl wait --for=condition=ready pod -l app=suite-arqueologica -n $NAMESPACE --timeout=300s

# Verificar estado
log "üîç Verificando estado del deploy..."
kubectl get pods -n $NAMESPACE
kubectl get services -n $NAMESPACE
kubectl get ingress -n $NAMESPACE

# Mostrar logs de los pods
log "üìã Logs de los pods:"
kubectl logs -l app=suite-arqueologica -n $NAMESPACE --tail=10

log "‚úÖ Deploy en Kubernetes completado exitosamente!"
log "üìä URLs:"
log "   ‚Ä¢ Frontend: https://tu-dominio.com"
log "   ‚Ä¢ API: https://tu-dominio.com/api"
log "   ‚Ä¢ Health Check: https://tu-dominio.com/api/health"

log "üîß Comandos √∫tiles:"
log "   ‚Ä¢ Ver pods: kubectl get pods -n $NAMESPACE"
log "   ‚Ä¢ Ver logs: kubectl logs -f deployment/suite-arqueologica -n $NAMESPACE"
log "   ‚Ä¢ Escalar: kubectl scale deployment suite-arqueologica --replicas=5 -n $NAMESPACE"
log "   ‚Ä¢ Monitoreo: kubectl top pods -n $NAMESPACE"
log "   ‚Ä¢ Describir: kubectl describe deployment suite-arqueologica -n $NAMESPACE" 