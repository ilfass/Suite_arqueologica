const axios = require('axios');

async function testEndpoints() {
  console.log('üß™ Probando endpoints de vidriera p√∫blica...');
  
  try {
    // 1. Obtener token de autenticaci√≥n
    console.log('üîê Obteniendo token de autenticaci√≥n...');
    const loginResponse = await axios.post('http://localhost:4001/auth/login-dev', {
      email: 'lic.fabiande@gmail.com',
      password: 'test123'
    });
    
    const token = loginResponse.data.data.tokens.token;
    console.log('‚úÖ Token obtenido:', token.substring(0, 50) + '...');
    
    // 2. Probar endpoint de perfil p√∫blico
    console.log('üåê Probando endpoint de perfil p√∫blico...');
    try {
      const profileResponse = await axios.get('http://localhost:4001/auth/public-profile', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('‚úÖ Perfil p√∫blico obtenido:', profileResponse.data);
    } catch (error) {
      console.log('‚ùå Error obteniendo perfil p√∫blico:', error.response?.data || error.message);
    }
    
    // 3. Probar actualizaci√≥n de perfil p√∫blico
    console.log('üíæ Probando actualizaci√≥n de perfil p√∫blico...');
    const updateData = {
      isPublic: true,
      displayName: 'Dr. Fabian de Haro',
      bio: 'Arque√≥logo especializado en arqueolog√≠a prehisp√°nica con m√°s de 15 a√±os de experiencia.',
      specialization: 'Arqueolog√≠a Prehisp√°nica, Cer√°mica Antigua',
      institution: 'Universidad de Buenos Aires',
      location: 'Buenos Aires, Argentina',
      email: 'lic.fabiande@gmail.com',
      website: 'https://arqueologia.uba.ar',
      socialMedia: {
        linkedin: 'https://linkedin.com/in/fabiandeharo',
        researchGate: 'https://researchgate.net/profile/fabiandeharo'
      },
      customMessage: 'Bienvenidos a mi espacio de investigaci√≥n arqueol√≥gica.',
      publicProjects: ['Proyecto Valle de Taf√≠', 'Estudio de Cer√°mica Prehisp√°nica'],
      publicFindings: ['Descubrimiento de alfarer√≠a prehisp√°nica'],
      publicReports: ['Informe de Excavaci√≥n 2022'],
      publicPublications: ['De Haro, F. (2023). "Patrones de Asentamiento"']
    };
    
    try {
      const updateResponse = await axios.put('http://localhost:4001/auth/public-profile', updateData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ Perfil p√∫blico actualizado:', updateResponse.data);
    } catch (error) {
      console.log('‚ùå Error actualizando perfil p√∫blico:', error.response?.data || error.message);
    }
    
    // 4. Probar endpoint a trav√©s del API Gateway
    console.log('üåê Probando a trav√©s del API Gateway...');
    try {
      const gatewayResponse = await axios.get('http://localhost:4000/api/auth/public-profile', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('‚úÖ Respuesta del API Gateway:', gatewayResponse.data);
    } catch (error) {
      console.log('‚ùå Error en API Gateway:', error.response?.data || error.message);
    }
    
    // 5. Probar endpoints del frontend
    console.log('üì± Probando endpoints del frontend...');
    try {
      const frontendResponse = await axios.get('http://localhost:3000/api/auth/public-profile', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('‚úÖ Respuesta del frontend:', frontendResponse.data);
    } catch (error) {
      console.log('‚ùå Error en frontend:', error.response?.data || error.message);
    }
    
    console.log('‚úÖ Pruebas completadas!');
    
  } catch (error) {
    console.error('‚ùå Error general:', error.message);
  }
}

testEndpoints(); 