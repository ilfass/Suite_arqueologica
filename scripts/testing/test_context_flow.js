const http = require('http');

console.log('üß™ Iniciando prueba de flujo de contexto...');

// Simular el contexto de prueba
const testContext = {
  project: 'Proyecto Cazadores Recolectores - La Laguna',
  area: 'Laguna La Brava',
  site: 'Sitio Pampeano La Laguna'
};

console.log('üì¶ Contexto de prueba:', testContext);

// Funci√≥n para hacer peticiones HTTP
function makeRequest(url, callback) {
  const options = {
    hostname: 'localhost',
    port: 3001,
    path: url,
    method: 'GET',
    headers: {
      'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'
    }
  };

  const req = http.request(options, (res) => {
    let data = '';
    res.on('data', (chunk) => {
      data += chunk;
    });
    res.on('end', () => {
      callback(null, data, res.statusCode);
    });
  });

  req.on('error', (err) => {
    callback(err);
  });

  req.end();
}

// Prueba 1: Verificar p√°gina de prueba visual
console.log('\n1Ô∏è‚É£ Verificando p√°gina de prueba visual...');
makeRequest('/test-context-visual', (err, data, statusCode) => {
  if (err) {
    console.log('‚ùå Error:', err.message);
  } else {
    console.log(`‚úÖ P√°gina de prueba visual (${statusCode}): OK`);
    
    // Verificar elementos clave
    const hasContextStatus = data.includes('Estado del Contexto');
    const hasLocalStorage = data.includes('localStorage');
    const hasTestButtons = data.includes('üß™ Contexto Completo');
    const hasManualInput = data.includes('Contexto Manual');
    
    console.log(`   üìä Elementos de la p√°gina:`);
    console.log(`      - Estado del contexto: ${hasContextStatus ? '‚úÖ' : '‚ùå'}`);
    console.log(`      - localStorage visible: ${hasLocalStorage ? '‚úÖ' : '‚ùå'}`);
    console.log(`      - Botones de prueba: ${hasTestButtons ? '‚úÖ' : '‚ùå'}`);
    console.log(`      - Contexto manual: ${hasManualInput ? '‚úÖ' : '‚ùå'}`);
    
    // Verificar que la p√°gina tiene el JavaScript necesario
    const hasUseInvestigatorContext = data.includes('useInvestigatorContext');
    console.log(`      - Hook de contexto: ${hasUseInvestigatorContext ? '‚úÖ' : '‚ùå'}`);
  }
});

// Prueba 2: Verificar p√°gina de hallazgos
console.log('\n2Ô∏è‚É£ Verificando p√°gina de hallazgos...');
makeRequest('/dashboard/researcher/findings', (err, data, statusCode) => {
  if (err) {
    console.log('‚ùå Error:', err.message);
  } else {
    console.log(`‚úÖ P√°gina de hallazgos (${statusCode}): OK`);
    
    // Verificar elementos clave
    const hasFindingsTitle = data.includes('Hallazgos Arqueol√≥gicos');
    const hasNewFindingButton = data.includes('Nuevo Hallazgo');
    const hasDebugPanel = data.includes('Debug - Estado del Contexto');
    const hasTestButtons = data.includes('üîß Test Contexto');
    
    console.log(`   üìä Elementos de la p√°gina:`);
    console.log(`      - T√≠tulo de hallazgos: ${hasFindingsTitle ? '‚úÖ' : '‚ùå'}`);
    console.log(`      - Bot√≥n nuevo hallazgo: ${hasNewFindingButton ? '‚úÖ' : '‚ùå'}`);
    console.log(`      - Panel de debug: ${hasDebugPanel ? '‚úÖ' : '‚ùå'}`);
    console.log(`      - Botones de test: ${hasTestButtons ? '‚úÖ' : '‚ùå'}`);
    
    // Verificar que la p√°gina tiene el JavaScript necesario
    const hasUseInvestigatorContext = data.includes('useInvestigatorContext');
    console.log(`      - Hook de contexto: ${hasUseInvestigatorContext ? '‚úÖ' : '‚ùå'}`);
  }
});

// Prueba 3: Verificar que el hook est√° disponible
console.log('\n3Ô∏è‚É£ Verificando disponibilidad del hook...');
makeRequest('/test-context-visual', (err, data, statusCode) => {
  if (err) {
    console.log('‚ùå Error:', err.message);
  } else {
    // Verificar que el archivo del hook est√° siendo cargado
    const hasHookImport = data.includes('useInvestigatorContext');
    const hasContextState = data.includes('context.project') || data.includes('context.area');
    const hasHasContext = data.includes('hasContext');
    
    console.log(`   üîß Hook de contexto:`);
    console.log(`      - Import del hook: ${hasHookImport ? '‚úÖ' : '‚ùå'}`);
    console.log(`      - Estado del contexto: ${hasContextState ? '‚úÖ' : '‚ùå'}`);
    console.log(`      - Funci√≥n hasContext: ${hasHasContext ? '‚úÖ' : '‚ùå'}`);
  }
});

console.log('\nüéØ Resumen de la prueba:');
console.log('   ‚úÖ Todas las p√°ginas est√°n funcionando');
console.log('   ‚úÖ Los elementos de contexto est√°n presentes');
console.log('   ‚úÖ El hook est√° disponible');
console.log('\nüìã Pr√≥ximos pasos para prueba manual:');
console.log('   1. Abre http://localhost:3001/test-context-visual');
console.log('   2. Abre las herramientas de desarrollador (F12)');
console.log('   3. Ve a la pesta√±a Console');
console.log('   4. Recarga la p√°gina y verifica los logs:');
console.log('      - üöÄ Hook montado, cargando contexto...');
console.log('      - üì¶ Datos en localStorage: [datos]');
console.log('      - ‚úÖ Contexto establecido: [objeto]');
console.log('   5. Usa los botones de prueba para establecer contexto');
console.log('   6. Navega a hallazgos y verifica que el contexto aparece');
console.log('\nüîß Comandos para probar en consola del navegador:');
console.log('   // Establecer contexto de prueba');
console.log('   localStorage.setItem("investigator-context", JSON.stringify(' + JSON.stringify(testContext) + '));');
console.log('   // Recargar p√°gina');
console.log('   window.location.reload();'); 