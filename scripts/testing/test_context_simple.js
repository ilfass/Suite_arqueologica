const http = require('http');

console.log('üß™ Iniciando prueba simple de contexto...');

// Funci√≥n para hacer peticiones HTTP
function makeRequest(url, callback) {
  const options = {
    hostname: 'localhost',
    port: 3001,
    path: url,
    method: 'GET',
    headers: {
      'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'
    }
  };

  const req = http.request(options, (res) => {
    let data = '';
    res.on('data', (chunk) => {
      data += chunk;
    });
    res.on('end', () => {
      callback(null, data, res.statusCode);
    });
  });

  req.on('error', (err) => {
    callback(err);
  });

  req.end();
}

// Prueba 1: P√°gina principal
console.log('\n1Ô∏è‚É£ Probando p√°gina principal...');
makeRequest('/', (err, data, statusCode) => {
  if (err) {
    console.log('‚ùå Error:', err.message);
  } else {
    console.log(`‚úÖ P√°gina principal (${statusCode}): ${data.includes('Suite Arqueol√≥gica') ? 'OK' : 'ERROR'}`);
  }
});

// Prueba 2: P√°gina de login
console.log('\n2Ô∏è‚É£ Probando p√°gina de login...');
makeRequest('/login', (err, data, statusCode) => {
  if (err) {
    console.log('‚ùå Error:', err.message);
  } else {
    console.log(`‚úÖ P√°gina de login (${statusCode}): ${data.includes('Iniciar sesi√≥n') ? 'OK' : 'ERROR'}`);
  }
});

// Prueba 3: P√°gina de prueba visual
console.log('\n3Ô∏è‚É£ Probando p√°gina de prueba visual...');
makeRequest('/test-context-visual', (err, data, statusCode) => {
  if (err) {
    console.log('‚ùå Error:', err.message);
  } else {
    console.log(`‚úÖ P√°gina de prueba visual (${statusCode}): ${data.includes('Test Visual de Contexto') ? 'OK' : 'ERROR'}`);
    
    // Verificar si tiene los botones de prueba
    const hasTestButtons = data.includes('üß™ Contexto Completo') && data.includes('üß™ Contexto Parcial');
    console.log(`   üìã Botones de prueba: ${hasTestButtons ? '‚úÖ Presentes' : '‚ùå Faltantes'}`);
  }
});

// Prueba 4: P√°gina de hallazgos (deber√≠a requerir auth)
console.log('\n4Ô∏è‚É£ Probando p√°gina de hallazgos...');
makeRequest('/dashboard/researcher/findings', (err, data, statusCode) => {
  if (err) {
    console.log('‚ùå Error:', err.message);
  } else {
    if (statusCode === 200) {
      console.log(`‚úÖ P√°gina de hallazgos (${statusCode}): Acceso directo`);
    } else if (statusCode === 302 || statusCode === 401) {
      console.log(`‚úÖ P√°gina de hallazgos (${statusCode}): Requiere autenticaci√≥n (correcto)`);
    } else {
      console.log(`‚ùì P√°gina de hallazgos (${statusCode}): Estado inesperado`);
    }
  }
});

// Prueba 5: Verificar backend
console.log('\n5Ô∏è‚É£ Probando backend...');
const backendReq = http.request({
  hostname: 'localhost',
  port: 4000,
  path: '/api/health',
  method: 'GET'
}, (res) => {
  let data = '';
  res.on('data', (chunk) => {
    data += chunk;
  });
  res.on('end', () => {
    console.log(`‚úÖ Backend (${res.statusCode}): ${data.includes('Suite Arqueol√≥gica API') ? 'OK' : 'ERROR'}`);
  });
});

backendReq.on('error', (err) => {
  console.log('‚ùå Backend error:', err.message);
});

backendReq.end();

console.log('\nüéØ Resumen de la prueba:');
console.log('   - Frontend: http://localhost:3001');
console.log('   - Backend: http://localhost:4000');
console.log('   - P√°gina de prueba: http://localhost:3001/test-context-visual');
console.log('   - Login: http://localhost:3001/login');
console.log('\nüìã Para probar manualmente:');
console.log('   1. Abre http://localhost:3001/test-context-visual');
console.log('   2. Verifica que el contexto se carga autom√°ticamente');
console.log('   3. Usa los botones de prueba para establecer contexto');
console.log('   4. Navega a hallazgos y verifica que el contexto aparece'); 